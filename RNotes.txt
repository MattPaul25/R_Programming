Functions to know
	general console functions and help

		ctrl + L - clear console

		getwd() - > get working directory -- getwd()
		setwd(dir) -> set the current working directory
		ls() - > list Current NameSpace Objects
		source(fileName) -> pull source data into console
		args(functionName) -> shows all the args of specified function
		rm(x, y, ...) remove specified objects
		complete.cases(object) -> returns object of logical bools for anything not an NA
		dump()
		dput()
		dget()
		str() means structure - diagnostic - answers question of whats in this object. Works with functions and vectors 
		file(description = "", open = "", blocking = TRUE, encoding = getOption("encoding")) open r (reading), w(writing), a (appending), etc.
		read(filename)
		readlines(filename, lineNum)
		writelines(filename, c(1,2,3,4,5,6,7,8,9,10)) 
		??functionName -> returns the R  help guide to that function
		cbind(x, y) -> converts two vectors to matrix -- puts x and y into columns
		xbind(x,y) -> converts two vectors into rows -- puts x and y into rows

Data Types
	Atomic classes: numeric, logical, character, integer, complex
	vectors, lists -> vectors only have elements of the same class , lists can have items of several types (classes)
	factors
	missing values -> Na NaN
	data frames -> Tabular Data
	names -> self describing data









R brief history: 
R is a dialect of S
	S is a language developed by John Chambers at Bell Labs in 1976 
		Implemented as a series of fourtran libraries - early forms didnt contain statistical models
		In 1988 it was rewritten in the C language - Version 3
		Version 4 (was developed in 1988) 

		Bell Labs gave STat SCi - an exclusive license to dev and sell the S language

		ub 04 Inishgt ful purchased S language from Lucent for 2m

		S language still exst as S-plus

	S philosophy
		Wanted to create an interactive environment - where you are not thinking about programming
		Use the environment without knowing about any sort of programming
		Use it to look at data and do analysis
		System promotes transition from user to programmer


Back to R - 91 created in NZ by Ross Ihaka and Robert Gentlemen 
			93 it was first announced to the public
			95 use GNU General Public License to make R free software
			96 A public mailing list is created (r-help and r-devel)
			97 R core group is formed
			2000 R version 1 is released
			13 R version 3.0.2 released

	R features:
			Semantics are similar to S - but its quite different
			Runs on any OS (even ps3?)
			Core software is lean... 
			Strong graphics capabilities - 
			R is free (free beer, and free speech)
				Free software 4 principles
					Freedom to run the program for any purpose freedom0
					Freedom to study how the program works, and adapt it to your needs freedom0
					Freedom to redistribute copies to your neighbors freedom2
					Freedom to improve the program and release them to the public

	R Drawbacks
			1 Based on 40 year old technology
			2 Little support for dynamic or 3d graphics
			3 functionality is based on consumer demands and user contributions
			4 Objects must generally be stored on physical memory, but there have been advancements
			5 Not ideal for all possible situations 
	
	Design of R system
			Base R system you download from CRAN
			The base system include utils stats datasets graphics grdevices grid methods tools parallel compiler splines tcltk stats4
			Revommended packages (boot, class, cluster, codetools, foreign, KernSmooth, lattice, mgcv, rpart, survival, MASS, spatial, nnet, matrix)

			CRAN has 4k packages that have been developed by users and programmers around the world


	R resources on CRAN (http://cran.r-project.org)
			Intro to R
			Writing R extensions
			R data import/exports
			R import 

	R data Types - all things are 'objects' 
			Basic Objects - character, numeric, integer, complex and logical (bool)
			Vector is an array -> no mixed types 
			List is a vector that is a sequence of objects -> not necessarily the same type

			Vector function (class, length)

		Numbers
			numbers are treated as numeric objects (double precision real numbers)
			Inf is special number that represents infinity
			If you explicitly want an integer, must specify the L suffix
			NaN (not a number) -> undefined or missing - can be thought of as a missing value

		Attributes
			Names, dimnames
			dimensions (e.g. matrices, arrays)
			class
			length
			other defined objects





